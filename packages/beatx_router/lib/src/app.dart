import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

abstract class BeatxApp {
  static CupertinoApp cupertino({
    Key? key,
    Widget? home,
    Map<String, WidgetBuilder>? routes,
    String? initialRoute,
    RouteFactory? onGenerateRoute,
    InitialRouteListFactory? onGenerateInitialRoutes,
    RouteFactory? onUnknownRoute,
    List<NavigatorObserver>? navigatorObservers,
    RouteInformationProvider? routeInformationProvider,
    RouteInformationParser<Object>? routeInformationParser,
    RouterDelegate<Object>? routerDelegate,
    BackButtonDispatcher? backButtonDispatcher,
    RouterConfig<Object>? routerConfig,
    TransitionBuilder? builder,
    String? title,
    GenerateAppTitle? onGenerateTitle,
    CupertinoThemeData? theme,
    Color? color,
    Locale? locale,
    Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates,
    LocaleListResolutionCallback? localeListResolutionCallback,
    LocaleResolutionCallback? localeResolutionCallback,
    Iterable<Locale>? supportedLocaless,
    bool? showPerformanceOverlay,
    bool? checkerboardRasterCacheImages,
    bool? checkerboardOffscreenLayers,
    bool? showSemanticsDebugger,
    bool? debugShowCheckedModeBanner,
    Map<ShortcutActivator, Intent>? shortcuts,
    Map<Type, Action<Intent>>? actions,
    String? restorationScopeId,
    ScrollBehavior? scrollBehavior,
    bool? useInheritedMediaQuery,
  }) =>
      CupertinoApp.router(
        routerDelegate: beatxRouter.routerDelegate,
        routeInformationParser: beatxRouter.routeInformationParser,
        routeInformationProvider: beatxRouter.routeInformationProvider,
        key: key,
        actions: actions,
        backButtonDispatcher: backButtonDispatcher,
        builder: builder,
        checkerboardOffscreenLayers: checkerboardOffscreenLayers ?? false,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages ?? false,
        color: color,
        debugShowCheckedModeBanner: debugShowCheckedModeBanner ?? true,
        locale: locale,
        localeListResolutionCallback: localeListResolutionCallback,
        localeResolutionCallback: localeResolutionCallback,
        localizationsDelegates: localizationsDelegates,
        onGenerateTitle: onGenerateTitle,
        restorationScopeId: restorationScopeId,
        routerConfig: routerConfig,
        scrollBehavior: scrollBehavior,
        shortcuts: shortcuts,
        showPerformanceOverlay: showPerformanceOverlay ?? false,
        showSemanticsDebugger: showSemanticsDebugger ?? false,
        supportedLocales: supportedLocaless ?? const [Locale('en', 'US')],
        theme: theme,
        title: title ?? '',
        useInheritedMediaQuery: useInheritedMediaQuery ?? false,
      );

  static MaterialApp material({
    Key? key,
    GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey,
    Widget? home,
    String? initialRoute,
    RouteFactory? onGenerateRoute,
    InitialRouteListFactory? onGenerateInitialRoutes,
    RouteFactory? onUnknownRoute,
    List<NavigatorObserver>? navigatorObservers,
    BackButtonDispatcher? backButtonDispatcher,
    RouterConfig<Object>? routerConfig,
    TransitionBuilder? builder,
    String? title,
    GenerateAppTitle? onGenerateTitle,
    ThemeData? theme,
    ThemeData? darkTheme,
    ThemeData? highContrastTheme,
    ThemeData? highContrastDarkTheme,
    ThemeMode? themeMode,
    Color? color,
    Locale? locale,
    Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates,
    LocaleListResolutionCallback? localeListResolutionCallback,
    LocaleResolutionCallback? localeResolutionCallback,
    Iterable<Locale>? supportedLocaless,
    bool? showPerformanceOverlay,
    bool? checkerboardRasterCacheImages,
    bool? checkerboardOffscreenLayers,
    bool? showSemanticsDebugger,
    bool? debugShowCheckedModeBanner,
    Map<ShortcutActivator, Intent>? shortcuts,
    Map<Type, Action<Intent>>? actions,
    String? restorationScopeId,
    ScrollBehavior? scrollBehavior,
    bool? debugShowMaterialGrid,
    bool? useInheritedMediaQuery,
  }) =>
      MaterialApp.router(
        routerDelegate: beatxRouter.routerDelegate,
        routeInformationParser: beatxRouter.routeInformationParser,
        routeInformationProvider: beatxRouter.routeInformationProvider,
        key: key,
        actions: actions,
        backButtonDispatcher: backButtonDispatcher,
        builder: builder,
        checkerboardOffscreenLayers: checkerboardOffscreenLayers ?? false,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages ?? false,
        color: color,
        darkTheme: darkTheme,
        debugShowCheckedModeBanner: debugShowCheckedModeBanner ?? true,
        debugShowMaterialGrid: debugShowMaterialGrid ?? false,
        highContrastDarkTheme: highContrastDarkTheme,
        highContrastTheme: highContrastTheme,
        locale: locale,
        localeListResolutionCallback: localeListResolutionCallback,
        localeResolutionCallback: localeResolutionCallback,
        localizationsDelegates: localizationsDelegates,
        onGenerateTitle: onGenerateTitle,
        restorationScopeId: restorationScopeId,
        routerConfig: routerConfig,
        scaffoldMessengerKey: scaffoldMessengerKey,
        scrollBehavior: scrollBehavior,
        shortcuts: shortcuts,
        showPerformanceOverlay: showPerformanceOverlay ?? false,
        showSemanticsDebugger: showSemanticsDebugger ?? false,
        supportedLocales: supportedLocaless ?? const [Locale('en', 'US')],
        theme: theme,
        themeMode: themeMode ?? ThemeMode.system,
        title: title ?? '',
        useInheritedMediaQuery: useInheritedMediaQuery ?? false,
      );
}
